package core.strategy.validation;

import io.serialization.StatedExternalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.LinkedList;
import java.util.List;
import static java.util.Objects.requireNonNull;

/**
 * An Evaluable Path represent a file / folder which supports static validation of file type, permissions, ...
 * The purpose of this static validation is to check if a path is valid in order to 
 * inform the user or perform actions before the path is used in another process.
 * Example: check if a path which is the destination of a backup is valid before the backup process starts
 * 
 * 
 * Serialization
 * This class implements Externalizable in order to perform explicit serialization 
 * using read and write external methods. UPDATE these methods when the class is 
 * changed to assure compatibility through different software versions!
 * 
 * @author Fedrix
 */
public abstract class EvaluablePath extends StatedExternalizable {
    private static final long serialVersionUID = 6L;
    protected String path; // Path interface is not serializable, path != null
    protected LinkedList<Exception> validationFailures;
    
    /**
     * Needed to make the class Externalizable (Serializable)
     * Warning: do not use or the state of the class will be corrupted
     */
    public EvaluablePath(){}  
    
    
    public EvaluablePath(String path){
        this.path = requireNonNull(path);
        validationFailures = new LinkedList<>();
    }
    
    /**
     * Validate the path according to the implementation of subclasses
     * @return an empty list if the fs unit is valid, a list filled with exception otherwise
     */
    public abstract List<Exception> validate();
    
    
    /**
     * @return the list of exception generated by validate() the last time it was called (empty if validate was never called)
     * @see validate()
     */
    public List<Exception> getFailures(){
        return validationFailures;
    }
    
    /**
     * Set the path
     * @param path must not be null
     */
    public void setPath(String path){
        this.path = requireNonNull(path);
    }
    
    
    /**
     * @return the string rappresentation of the path
     */
    public String getPathString(){
        return path;
    }
    
    /**
     * @return the path which can be validated
     */
    public Path getPath(){
        return Paths.get(path);
    }

    @Override
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeUTF(path);
        out.writeObject(validationFailures);
    }

    @Override
    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
        this.path = in.readUTF();
        this.validationFailures = (LinkedList<Exception>) in.readObject();
        super.reachedEOF = false;
    }

    @Override
    public String toString() {
        return "EvaluablePath{" + "path=" + path + '}';
    }
    
    
    
}
