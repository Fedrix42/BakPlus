package gui.backups.integrity.view;

import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.nio.file.Path;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import gui.CenteredDialog;
import gui.Controller;
import utils.Pair;

/**
 * A dialog used by the user in order to provide the passwords needed
 * to decrypt backup files
 * @author Fedrix
 */
public class BackupKeyInputDialog extends CenteredDialog {
    private static final int DIALOG_WIDTH = 750;
    private static final int DIALOG_HEIGHT = 300;
    private static final String title = "Backups Password";
    private boolean done = false; // Flag to check if done button was pressed
    private final List<Path> backupFiles;
    private final List<JTextField> fields;
    private final copyFirstJTextFieldListener listener;
    private class copyFirstJTextFieldListener implements KeyListener {
        @Override
        public void keyTyped(KeyEvent e) {}
        @Override
        public void keyPressed(KeyEvent e) {}
        @Override
        public void keyReleased(KeyEvent e) {
            Iterator<JTextField> it = fields.iterator(); 
            JTextField first = it.next();
            String firstText = first.getText();
            while(it.hasNext()){
                it.next().setText(firstText);
            }
        }
    }
    
    public BackupKeyInputDialog(JFrame parent, boolean modal, List<Path> backupFiles) {
        super(parent, modal);
        this.backupFiles = backupFiles;
        this.fields = new LinkedList<>();
        this.setTitle(title);
        this.setMinimumSize(new Dimension(DIALOG_WIDTH, DIALOG_HEIGHT));
        this.setResizable(false);
        this.listener = new copyFirstJTextFieldListener();
        initComponents();
        createPanels();
    }
    
    /**
     * Show the dialog an obtain the expected result
     * @return null if the dialog is closed without using the correct button
     */
    public List<Pair<Path, char[]>> showDialog(){
        this.setVisible(true);
        return (done) ? getData() : null;
    }
    
    private List<Pair<Path, char[]>> getData(){
        List<Pair<Path, char[]>> res = new LinkedList<>();
        assert(backupFiles.size() == fields.size());
        Iterator<JTextField> fieldsIt = fields.iterator();
        Iterator<Path> filesIt = backupFiles.iterator();
        while(fieldsIt.hasNext())
            res.add(new Pair<>(filesIt.next(), fieldsIt.next().getText().toCharArray()));
        return res;
    }
    
    private void createPanels(){
        for(var file : backupFiles){
            // Panel settings
            JPanel panel = new JPanel();
            panel.setLayout(new FlowLayout(FlowLayout.LEFT));
            panel.setMaximumSize(new Dimension(DIALOG_WIDTH, 30));
            // Label settings
            JLabel pathLabel = new JLabel();
            pathLabel.setPreferredSize(new Dimension(400, 25));
            pathLabel.setText(file.getFileName().toString());
            pathLabel.addMouseListener(new MouseAdapter(){
                @Override
                public void mouseEntered(MouseEvent me) {
                    pathLabel.setText(file.toString());
                }

                @Override
                public void mouseExited(MouseEvent e) {
                    pathLabel.setText(file.getFileName().toString());
                }
            });
            // JTextField settings
            JTextField inputTF = new JTextField();
            inputTF.setPreferredSize(new Dimension(200, 25));
            // Adding componenets
            panel.add(pathLabel);
            panel.add(inputTF);
            jPanelInsideScrollPane.add(panel);
            fields.add(inputTF);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jLabelDescription = new javax.swing.JLabel();
        jCheckBoxSamePwd = new javax.swing.JCheckBox();
        jScrollPane = new javax.swing.JScrollPane();
        jPanelInsideScrollPane = new javax.swing.JPanel();
        jButtonDone = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabelDescription.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabelDescription.setText("An password in needed in order to decrypt backups if they were encrypted during creation (Left blank otherwise)");

        jCheckBoxSamePwd.setText("Same password for all backups");
        jCheckBoxSamePwd.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxSamePwdItemStateChanged(evt);
            }
        });

        jScrollPane.setMaximumSize(new java.awt.Dimension(32767, 80));

        jPanelInsideScrollPane.setMaximumSize(new java.awt.Dimension(0, 50));
        jPanelInsideScrollPane.setLayout(new javax.swing.BoxLayout(jPanelInsideScrollPane, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane.setViewportView(jPanelInsideScrollPane);

        jButtonDone.setText("Done");
        jButtonDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDoneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelDescription)
                            .addComponent(jCheckBoxSamePwd))
                        .addGap(0, 50, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonDone, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxSamePwd, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonDone, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDoneActionPerformed
        done = true;
        this.dispose();
    }//GEN-LAST:event_jButtonDoneActionPerformed

    private void jCheckBoxSamePwdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxSamePwdItemStateChanged
        Iterator<JTextField> it = fields.iterator(); 
        boolean selected = evt.getStateChange() == ItemEvent.SELECTED;
        JTextField first = it.next(); //Skipping first one, dialog should not be created if no file where selected
        while(it.hasNext()){
            JTextField next = it.next();
            next.setEditable(!selected);
            next.setText(first.getText());
        }
        if(selected)
            first.addKeyListener(listener);
        else
            first.removeKeyListener(listener);
    }//GEN-LAST:event_jCheckBoxSamePwdItemStateChanged


    @Override
    public <T extends Controller> void setController(T controller) {}

    @Override
    public BackupKeyInputDialog toBackupKeyInputDialog() {
        return this;
    }

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDone;
    private javax.swing.JCheckBox jCheckBoxSamePwd;
    private javax.swing.JLabel jLabelDescription;
    private javax.swing.JPanel jPanelInsideScrollPane;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
